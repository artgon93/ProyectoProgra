package proyectoprograi;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.JOptionPane;
import javax.swing.JFrame;

public class VentanaJuego extends javax.swing.JFrame {

    JFrame ventana;
    JButton iconosMatriz[][];//logicMAT visible//
    int logicaMatriz[][];
    JSeparator sp1 = new JSeparator();
    JSeparator sp2 = new JSeparator();
    Random aleatorio;
    static int x;
    static int y;
    ImageIcon Img1 = new ImageIcon(getClass().getResource("/imagenes/Dazul.png"));
    ImageIcon Img2 = new ImageIcon(getClass().getResource("/imagenes/Dverde.png"));
    ImageIcon Img3 = new ImageIcon(getClass().getResource("/imagenes/Drojo.png"));
    ImageIcon dia1;
    String nombreJugador;
    static int l1 = 0, l2 = 0;
    Color trans = new Color(0, 0, 0, 0);

    public VentanaJuego(int lv, String nom) {

        initComponents();
        nombreJugador = nom;
        EleccionNivel(lv);
        InterfazInicial();
        Same();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMinimumSize(new java.awt.Dimension(760, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 760, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(776, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static void EleccionNivel(int nivel) {

        switch (nivel) {
            case 1:
                x = 10;
                y = 15;
                break;
            case 2:
                x = 15;
                y = 15;
                break;

            case 3:
                x = 15;
                y = 20;
                break;

            case 4:
                x = 20;
                y = 20;
                break;
        }
        l1 = 20 + (10 + x * 30);
        l2 = 20 + (10 + y * 30);
    }

    private void InterfazInicial() {
        repaint();
        setLayout(null);

        iconosMatriz = new javax.swing.JButton[x][y];//tama√±o de logicMAT//
        logicaMatriz = new int[x][y];//logicMAT de enteros//
        aleatorio = new Random();

        sp1.setOrientation(SwingConstants.VERTICAL);
        sp1.setBounds(l1, 0, 10, l2);
        sp2.setOrientation(SwingConstants.HORIZONTAL);
        sp2.setBounds(0, l2, l1, 10);

        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                iconosMatriz[i][j] = new JButton(); //espacio de memoria/
                iconosMatriz[i][j].setLocation(10 + i * 30, 10 + j * 30);
                logicaMatriz[i][j] = aleatorio.nextInt(3) + 1;
                iconosMatriz[i][j].setText("" + logicaMatriz[i][j]);
                interfaz(i, j);
                add(iconosMatriz[i][j]);
                add(sp1);
                add(sp2);
            }
        }
    }

    public void Same() {
        analizarMatriz();
        jugar();
        Same();
    }

    public void analizarMatriz() {
        boolean valid = false;
        for (int i = 1; i < x - 1; i++) {
            for (int j = 1; j < y - 1; j++) {
                if ((logicaMatriz[i][j] == logicaMatriz[i + 1][j]) || (logicaMatriz[i][j] == logicaMatriz[i - 1][j])
                        || (logicaMatriz[i][j] == logicaMatriz[i][j - 1]) || (logicaMatriz[i][j] == logicaMatriz[i][j + 1])) {
                    valid = true;
                }
            }
        }
        if (!valid) {
            JOptionPane.showMessageDialog(null, "Ya No le quedan Movimientos", "Fin De La Partida", JOptionPane.INFORMATION_MESSAGE);
            VentanaMarcador vm = new VentanaMarcador();
            vm.show();
            this.hide();
            this.disable();
        }
    }

    public void jugar() {
        for (int i = 0; i < iconosMatriz.length; i++) { //
            for (int j = 0; j < iconosMatriz.length; j++) {

                iconosMatriz[i][j].addActionListener(new ActionListener() { //funcion del mouse//
                    @Override
                    public void actionPerformed(ActionEvent ev) {
                        for (int k = 0; k < iconosMatriz.length; k++) {
                            for (int l = 0; l < iconosMatriz.length; l++) {//posicion en la logicMAT//
                                if (iconosMatriz[k][l] == ev.getSource()) {
                                    int thisColor = logicaMatriz[k][l];
                                    if (thisColor != -1) {
                                        validateColor(k, l, thisColor);
                                        marcador();
                                        System.out.println("" + ev.getSource());
                                    }
                                }
                            }

                        }
                    }
                });
            }
        }
    }

    public void validateColor(int k, int l, int thisColor) {

        if (k != 0) {
            if (logicaMatriz[k - 1][l] == thisColor) {
                logicaMatriz[k - 1][l] = -1;
                logicaMatriz[k][l] = -1;

                iconosMatriz[k - 1][l].setIcon(null);
                iconosMatriz[k - 1][l].setBackground(Color.black);
                iconosMatriz[k][l].setIcon(null);
                iconosMatriz[k][l].setBackground(Color.black);

                validateColor(k - 1, l, thisColor);

            }
        }

        if (k != 9) {
            if (logicaMatriz[k + 1][l] == thisColor) {
                logicaMatriz[k + 1][l] = -1;
                logicaMatriz[k][l] = -1;

                iconosMatriz[k + 1][l].setIcon(null);
                iconosMatriz[k + 1][l].setBackground(Color.black);
                iconosMatriz[k][l].setIcon(null);
                iconosMatriz[k][l].setBackground(Color.black);

                validateColor(k + 1, l, thisColor);
            }

        }

        if (l != 0) {
            if (logicaMatriz[k][l - 1] == thisColor) {
                logicaMatriz[k][l - 1] = -1;
                logicaMatriz[k][l] = -1;

                iconosMatriz[k - 1][l].setIcon(null);
                iconosMatriz[k - 1][l].setBackground(Color.black);
                iconosMatriz[k][l].setIcon(null);
                iconosMatriz[k][l].setBackground(Color.black);

                validateColor(k, l - 1, thisColor);
            }
        }

        if (l != 9) {
            if (logicaMatriz[k][l + 1] == thisColor) {
                logicaMatriz[k][l + 1] = -1;
                logicaMatriz[k][l] = -1;

                iconosMatriz[k + 1][l].setIcon(null);
                iconosMatriz[k + 1][l].setBackground(Color.black);
                iconosMatriz[k][l].setIcon(null);
                iconosMatriz[k][l].setBackground(Color.black);

                validateColor(k, l + 1, thisColor);

            }
        }
    }

    public int[][] Cambio(int[][] lmat) {
        int[][] m = lmat;
        int lim1 = x - 1;
        int lim2 = y - 1;
        int temp;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                if (m[i][j] == -1) {
                    temp = m[i][j];
                    m[i][j] = m[lim1][lim2];
                    m[lim1][lim2] = temp;
                    lim1--;
                    if (lim1 == 0) {
                        lim2--;
                        lim1 = x - 1;
                    }
                }

            }
        }
        return m;
    }

    public ImageIcon establecerIcono(int num) {
        if (num == 1) {
            dia1 = Img1;
        } else if (num == 2) {
            dia1 = Img2;
        } else if (num == 3) {
            dia1 = Img3;
        } else if (num == -1) {
            dia1 = null;
        }
        return dia1;
    }

    public void interfaz(int i, int j) {
        establecerIcono(Integer.parseInt(iconosMatriz[i][j].getText()));
        iconosMatriz[i][j].setText("");
        iconosMatriz[i][j].setIcon(dia1);
        iconosMatriz[i][j].setSize(iconosMatriz[i][j].getMinimumSize());
        iconosMatriz[i][j].setOpaque(false);
        iconosMatriz[i][j].setBackground(trans);
        iconosMatriz[i][j].setBorder(null);
        iconosMatriz[i][j].setVisible(true);
    }

    public String imprimir(int mat[][]) {
        String temp = "";
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                temp += mat[i][j] + ",";
            }
            temp += "\n";
        }
        return temp;
    }

    private void marcador() {
        int cont = 0;
        int marcador;
        for (int i = 0; i < iconosMatriz.length; i++) { //
            for (int j = 0; j < iconosMatriz.length; j++) {
                if (logicaMatriz[i][j] == -1) {
                    cont += 1;
                }
            }
        }
        marcador = 2 * cont;
        //this.jLabel1.setText("El marcador es: " + marcador);
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaJuego(0, "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
